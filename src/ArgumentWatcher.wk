import ReturnValueStubber;

every ArgumentWatcher{T, R} is:

	with T[] calls = [];
	with Num[] callNums = [];

	with ReturnValueStubber{R}[] stubs = [];
	with T[] matches = [];

	tell(T, Num) {
		calls.push(T);
		callNums.push(Num);
	}

	T[] -- getCalls() {
		return calls;
	}

	Num[] -- getCallIndices(T) {
		var Num[] = [];
		for(var $Num = 0; $Num < calls.getSize(); $Num += 1) {
			if(calls[$Num] == T)
				Num[].push(callNums[$Num]);
		}

		return Num[];
	}

	expect(T, ReturnValueStubber{R}) {
		matches.push(T);
		stubs.push(ReturnValueStubber);
	}

	ReturnValueStubber{R}[] -- getPossibleStubs(T) {
		var ReturnValueStubber{R}[] ret = [];
		for(var Num = 0; Num < matches.getSize(); Num += 1) {
			if(matches[Num] == T) {
				ret.push(stubs[Num]);
			}
		}

		return ret;
	}
