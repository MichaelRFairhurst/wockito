module wkto;

import std.Map;
import io.File;
import treflect.WakeClass;
import treflect.WakeType;
import wkto.NameTransformer;
import wkto.VerifyMethodGenerator;
import wkto.ArgumentIterator;
import wkto.MethodIterator;
import wkto.MethodIteration;
import wkto.ArgumentIteration;
import wkto.ArgumentWatcherGatherer;
import wkto.WhenGatherer;
import wkto.MethodBodyGenerator;
import wkto.MethodGenerator;
import wkto.MethodReturnGenerator;
import wkto.VerifyMethodReturnGenerator;
import wkto.CommaStatementGenerator;

#>
# Generates files along the lines of:
#
# every ExampleMockVerifier is:
#
# 	needs ArgumentWatcher{Text, Text}:getZpTextZcNumZpZa1 getZpTextZcNumZpZa1, ArgumentWatcher{Num, Text}:getZpTextZcNumZpZa1 getZpTextZcNumZpZa2;
#
#	with public CallValidator? = nothing;
#
#	get(Text, Num) {
#		var Num[] calls = getZpTextZcNumZpZa1.getCallIndices(Text);
#		calls = calls.intersect(getZpTextZcNumZpZa2.getCallIndices(Num));
#		var $CallValidator? = CallValidator; // bugfix.....
#		if $CallValidator exists {
#			$CallValidator.methodname = "get(Text,Num)";
#			$CallValidator.validate(calls);
#		}
#	}
##
every MockVerifierFileGenerator is:

	needs NameTransformer, File, MethodIterator, CommaStatementGenerator;

	provides File <- { return File; },
		MethodGenerator,
		MethodBodyGenerator <- VerifyMethodGenerator, VerifyMethodGenerator,
		MethodReturnGenerator <- VerifyMethodReturnGenerator, VerifyMethodReturnGenerator,
		ArgumentIterator,
		NameTransformer,
		MethodIterator,
		ArgumentWatcherGatherer,
		WhenGatherer;

	generate(WakeClass) {
		File.write("every " + WakeClass.classname + "Verifier is:\n");

		generateNeeds(WakeClass);
		generateValidatorProperty();
		generateMethods(WakeClass);
	}

	generateValidatorProperty() {
		File.write("\twith public CallValidator? = nothing;\n\n");
	}

	generateMethods(WakeClass) {
		MethodIterator.set((cast MethodIteration) (MethodGenerator from this));
		MethodIterator.iterate(WakeClass);
	}

	generateNeeds(WakeClass) {
		var ArgumentWatcherGatherer from this;
		MethodIterator.set((cast MethodIteration) ArgumentWatcherGatherer);
		MethodIterator.iterate(WakeClass);

		var Text[] deps = [];

		var Text[] = ArgumentWatcherGatherer.provisions;
		for(var Num = 0; Num < ArgumentWatcherGatherer.provisions.getSize(); Num += 1) {
			deps.push(ArgumentWatcherGatherer.provisions[Num] + " " + ArgumentWatcherGatherer.aliases[Num]);
		}

		var WhenGatherer from this;
		MethodIterator.set((cast MethodIteration) WhenGatherer);
		MethodIterator.iterate(WakeClass);

		Text[] = WhenGatherer.provisions;
		for(var Num = 0; Num < WhenGatherer.provisions.getSize(); Num += 1) {
			deps.push(WhenGatherer.provisions[Num] + " " + WhenGatherer.aliases[Num]);
		}

		File.write(CommaStatementGenerator.generate("needs", deps));
	}
