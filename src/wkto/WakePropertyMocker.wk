module wkto;

import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeLambdaType;
import wkto.WatchedArgument;
import wkto.StubbedReturn;
import wkto.NameTransformer;

every WakePropertyMocker is:

	provides StubbedReturn, WatchedArgument;

	needs NameTransformer;

	WatchedArgument[] -- getWatchedArguments(WakeProperty) {
		var WatchedArgument[] = [];

		var Text base = NameTransformer.methodToProperty(WakeProperty.name);

		var Text retname = "Num";
		var WakeLambdaType? = WakeProperty.WakeType.WakeLambdaType;

		if WakeLambdaType exists {
			var returned WakeType? = WakeLambdaType.returntype;
			if returned exists {
				retname = returned.getPureName();
			}

			var WakeType[] = WakeLambdaType.arguments;
			for(var Num = 0; Num < WakeLambdaType.arguments.getSize(); Num += 1) { // @Todo foreach at
				var WatchedArgument from this;
				WatchedArgument.type = WakeLambdaType.arguments[Num].getPureName();
				WatchedArgument.rettype = retname;
				WatchedArgument.specialty = WatchedArgument.alias := base + "_arg" + Num.toString();

				WatchedArgument[].push(WatchedArgument);
			}
		}

		return WatchedArgument[];
	}

	StubbedReturn? -- getStubbedReturn(WakeProperty) {
		if(WakeProperty.WakeType.type != 1) return nothing;

		var WakeLambdaType? = WakeProperty.WakeType.WakeLambdaType;
		if WakeLambdaType exists {
			if(WakeLambdaType.arguments.getSize() > 0) return nothing;

			var WakeType? = WakeLambdaType.returntype;
			if WakeType exists {
				var StubbedReturn from this;
				StubbedReturn.type = WakeType.getPureName();
				StubbedReturn.alias = NameTransformer.methodToProperty(WakeProperty.name);
				StubbedReturn.specialty = StubbedReturn.alias;
				return StubbedReturn;
			}
		}

		return nothing;
	}
