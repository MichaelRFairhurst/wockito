import File;
import WakeClass;
import WakeType;
import NameTransformer;
import Map;

#>
# Generates code along the lines of:
#
# every ExampleMock is:
#
#	needs ArgumentWatcher{Text, Text} getZpTextZcNumZpZa1, ArgumentWatcher{Num, Text}:getZpTextZcNumZpZa2 getZpTextZcNumZpZa2;
#
#	provides
#		ArgumentWatcher{Text, Text}:getZpTextZcNumZpZa1 <- { return getZpTextZcNumZpZa1; },
#		ArgumentWatcher{Num, Text}:getZpTextZcNumZpZa2 <- { return getZpTextZcNumZpZa2; },
#		ExampleMockStubber,
#		ExampleMockValidator;
#
#	Text -- get(Text, Num) {
#		var ReturnValueStubber{Text}[] = getZpTextZcNumZpZa1.getPossibleStubs(Text);
#		ReturnValueStubber = ReturnValueStubber.intersect(getZpTextZcNumZpZa2.getPossibleStubs(Num));
#		return ReturnValueStubber[0].get();
#	}
##
every MockFileGenerator is:

	needs NameTransformer;

	generate(WakeClass, File) {
		File.write("every " + WakeClass.classname + "Mock (capable " + WakeClass.classname + ") is:");

		generateImports(WakeClass, File);
		generateNeeds(WakeClass, File);
		generateProvisions(WakeClass, File);
		generateMethods(WakeClass, File);
	}

	generateImports(WakeClass, File);

	generateMethods(WakeClass, File) {
	}

	generateProvisions(WakeClass, File) {
	}

	generateNeeds(WakeClass, File) {
	}
