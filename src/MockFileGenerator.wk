import File;
import WakeClass;
import WakeType;
import NameTransformer;
import Map;
import MockMethodGenerator;
import ArgumentIterator;
import MethodIterator;
import MethodIteration;
import ImportIterator;
import ArgumentIteration;
import ArgumentWatcherGatherer;
import WhenGatherer;
import MethodBodyGenerator;
import MethodGenerator;
import MethodReturnGenerator;
import MockMethodReturnGenerator;
import WakeProperty;

#>
# Generates code along the lines of:
#
# every ExampleMock is:
#
#	needs ArgumentWatcher{Text, Text} getZpTextZcNumZpZa1, ArgumentWatcher{Num, Text}:getZpTextZcNumZpZa2 getZpTextZcNumZpZa2;
#
#	provides
#		ArgumentWatcher{Text, Text}:getZpTextZcNumZpZa1 <- { return getZpTextZcNumZpZa1; },
#		ArgumentWatcher{Num, Text}:getZpTextZcNumZpZa2 <- { return getZpTextZcNumZpZa2; },
#		ExampleMockStubber,
#		ExampleMockValidator;
#
#	Text -- get(Text, Num) {
#		var When{Text}[] = getZpTextZcNumZpZa1.getPossibleStubs(Text);
#		When = When.intersect(getZpTextZcNumZpZa2.getPossibleStubs(Num));
#		return When[0].get();
#	}
##
every MockFileGenerator is:

	needs NameTransformer, File, MethodIterator;

	provides File <- { return File; },
		MethodGenerator,
		MethodBodyGenerator <- MockMethodGenerator, MockMethodGenerator,
		MethodReturnGenerator <- MockMethodReturnGenerator, MockMethodReturnGenerator,
		ArgumentIterator,
		ImportIterator,
		NameTransformer,
		MethodIterator,
		ArgumentWatcherGatherer,
		WhenGatherer;

	generate(WakeClass) {
		generateImports(WakeClass);

		File.write("\n");
		File.write("every " + WakeClass.classname + "Mock (capable " + WakeClass.classname + ") is:\n");

		generateNeeds(WakeClass);
		generateProvisions(WakeClass);
		generateMethods(WakeClass);
	}

	generateImports(WakeClass) {
		var ImportIterator <- this;

		ImportIterator.addImport('When');
		ImportIterator.addImport('ArgumentWatcher');
		ImportIterator.addImport('MockTracker');
		ImportIterator.addImport(WakeClass.classname);

		MethodIterator.set((cast MethodIteration) ImportIterator);
		MethodIterator.iterate(WakeClass);

		foreach(ImportIterator.getImports()) { // @TODO foreach as
			File.write("import " + Text + ";\n");
		}
	}

	generateMethods(WakeClass) {
		MethodIterator.set((cast MethodIteration) (MethodGenerator <- this));
		MethodIterator.iterate(WakeClass);
	}

	generateProvisions(WakeClass) {
		var ArgumentWatcherGatherer <- this;
		MethodIterator.set((cast MethodIteration) ArgumentWatcherGatherer);
		MethodIterator.iterate(WakeClass);

		File.write("\tprovides\n");
		for(var Num = 0; Num < ArgumentWatcherGatherer.declarations.getSize(); Num += 1) { // @TODO foreach at
			File.write("\t\t" + ArgumentWatcherGatherer.provisions[Num] + " <- { return " + ArgumentWatcherGatherer.aliases[Num] + "; },\n");
		}

		var WhenGatherer <- this;
		MethodIterator.set((cast MethodIteration) WhenGatherer);
		MethodIterator.iterate(WakeClass);

		for(var Num = 0; Num < WhenGatherer.declarations.getSize(); Num += 1) { // @TODO foreach at
			File.write("\t\t" + WhenGatherer.provisions[Num] + " <- { return " + WhenGatherer.aliases[Num] + "; },\n");
		}

		foreach(WakeClass.properties.getKeys()) { // @Todo foreach in
			if(Text.indexOf('<-') == nothing) continue;
			var WakeProperty? = WakeClass.properties.get(Text);
			if WakeProperty exists {
				var WakeType? method = WakeProperty.WakeType;
				if method exists {
					var WakeType? provision = method.returntype;
					if provision exists {
						File.write("\t\t" + provision.getPureName());
						if(provision.specialty != "") File.write(":" + provision.specialty);
						File.write(" <- { return " + NameTransformer.methodToProperty(WakeProperty.name) + provision.specialty + ".get(); },\n");
						File.write("\t\tWhen{" + provision.getPureName() + "}");
						if(provision.specialty != "") File.write(":" + provision.specialty);
						File.write(" <- { return " + NameTransformer.methodToProperty(WakeProperty.name) + provision.specialty + "; },\n");
					}
				}
			}
		}


		File.write("\t\t" + WakeClass.classname + "Stubber,\n\t\t" + WakeClass.classname + "Verifier;\n\n");
	}

	generateNeeds(WakeClass) {
		var ArgumentWatcherGatherer <- this;
		MethodIterator.set((cast MethodIteration) ArgumentWatcherGatherer);
		MethodIterator.iterate(WakeClass);

		File.write("\tneeds\n");

		var Text[] = ArgumentWatcherGatherer.declarations;
		foreach(Text[]) {
			File.write("\t\t" + Text + ",\n");
		}

		var WhenGatherer <- this;
		MethodIterator.set((cast MethodIteration) WhenGatherer);
		MethodIterator.iterate(WakeClass);

		Text[] = WhenGatherer.declarations;
		foreach(Text[]) {
			File.write("\t\t" + Text + ",\n");
		}

		File.write("\t\tMockTracker;\n\n");
	}
