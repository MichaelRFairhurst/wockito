module wkto.generator;

import treflect.WakeClass;
import treflect.WakeType;
import treflect.WakeParameterizedType;
import treflect.WakeListType;
import treflect.WakeOptionalType;
import treflect.WakeClassType;
import treflect.WakeProperty;
import wkto.generator.MethodIterator;
import wkto.generator.ArgumentIterator;
import wkto.generator.MethodIteration;
import wkto.generator.ArgumentIteration;
import wkto.generator.NameTransformer;

every ArgumentWatcherGatherer (an ArgumentIterator, capable ArgumentIteration, capable MethodIteration) is:

	needs NameTransformer, MethodIterator then {
		set((cast ArgumentIteration) this);
	}

	with public Text[] types = [];
	with public Text[] casts = [];
	with public Text[] aliases = [];
	with public Text[] declarations = [];
	with public Text[] provisions = [];

	with Num? lastCallIndex = nothing;

	iterate(WakeClass, WakeProperty, WakeType? returntype, WakeType arg, argn Num) {
		var Text returntypename = "Num";

		if returntype exists {
			returntypename = returntype.getPureName();
		}

		var Text typename = "ArgumentWatcher{" + getMockableArgTypeName(arg) + "," + returntypename + "}";
		var Text alias = NameTransformer.methodToProperty(WakeProperty.name) + "Za" + argn.toString();
		if !types.contains(typename) then types.push(typename);
		aliases.push(alias);
		declarations.push(typename + " " + alias);
		provisions.push(typename + ":" + alias);
		if getMockableArgTypeName(arg) != arg.getPureName() {
			casts.push("(unsafe cast " + getMockableArgTypeName(arg)+ ")");
		} else {
			casts.push("");
		}
	}

	iterate(WakeClass) {

		MethodIterator.set((cast MethodIteration) this);
		MethodIterator.iterate(WakeClass);
	}

	Text -- getMockableArgTypeName(WakeType) {
		var WakeParameterizedType? = WakeType.WakeParameterizedType;
		if WakeParameterizedType exists {
			if WakeParameterizedType.isArgParameterization {
				return "Anything";
			} else {
				return WakeParameterizedType.label;
			}
		}

		var WakeClassType? = WakeType.WakeClassType;
		if WakeClassType exists {
			var Text = WakeClassType.classname;
			foreach $WakeType in WakeClassType.parameters {
				Text += getMockableArgTypeName($WakeType);
			}

			return Text;
		}

		var WakeListType? = WakeType.WakeListType;
		if WakeListType exists {
			return getMockableArgTypeName(WakeListType.contained) + "[]";
		}

		var WakeOptionalType? = WakeType.WakeOptionalType;
		if WakeOptionalType exists {
			return getMockableArgTypeName(WakeOptionalType.contained) + "[]";
		}

		return "Error";
	}
