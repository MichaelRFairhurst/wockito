module wkto.generator;

import io.File;
import std.Map;
import treflect.WakeClass;
import treflect.WakeType;
import treflect.WakeProperty;
import wkto.generator.CommaStatementGenerator;
import wkto.generator.WatchedArgument;
import wkto.generator.StubbedReturn;
import wkto.generator.WakeClassMocker;

#>
# Generates files along the lines of:
#
# every MockProvider is:
#
#	with Asserts[] = [];
#
#	use($Asserts) {
#		Asserts[0] = $Asserts;
#	}
#
#	provides ExampleMock,
#		ArgumentWatcher{Text, Text},
#		ArgumentWatcher{Num, Text},
#		Asserts from { return Asserts[0]; },
#		TimesCalledValidator;
#
#	ExampleStubber -- when(ExampleMock) {
#		return ExampleStubber from ExampleMock;
#	}
#
#	ExampleVerifier -- verify(ExampleMock) {
#		var TimesCalledValidator from this;
#		var ExampleVerifier from ExampleMock;
#		ExampleVerifier.CallValidator = TimesCalledValidator;
#		return ExampleVerifier;
#	}
#
#	ExampleVerifier -- verify(Num)Times(ExampleMock) {
#		var ExampleVerifier from this;
#		ExampleVerifier.CallValidator.minTimesCalled = Num;
#		ExampleVerifier.CallValidator.maxTimesCalled = Num;
#	}
#
##
every MockProviderFileGenerator is:

	needs CommaStatementGenerator, WakeClassMocker;

	generate(File, WakeClass[]) {
		File.write('\n');
		File.write('every MockProvider is:\n');
		File.write('\twith Asserts[] = [];\n');

		var WatchedArgument[] = [];
		var StubbedReturn[] = [];

		foreach(WakeClass[]) {
			foreach(WakeClassMocker.getWatchedArguments(WakeClass)) {
				WatchedArgument[].push(WatchedArgument);
			}

			foreach(WakeClassMocker.getStubbedReturns(WakeClass)) {
				StubbedReturn[].push(StubbedReturn);
			}
		}

		generateProvisions(File, WatchedArgument[], StubbedReturn[], WakeClass[]);
		generateMethods(File, WakeClass[]);
	}

	generateMethods(File, WakeClass[]) {
		File.write("\tuse(Asserts) {\n");
		File.write("\t\tAsserts[0] = Asserts;\n");
		File.write("\t}\n\n");

		foreach(WakeClass[]) {
			var Text basename = WakeClass.classname.substr(0, -4);
			File.write("\t" + basename + "Stubber -- when(" + basename + "Mock) {\n");
			File.write("\t\treturn " + basename + "Stubber from " + basename + "Mock;\n");
			File.write("\t}\n\n");

			File.write("\t" + basename + "Verifier -- verify(" + basename + "Mock) {\n");
			File.write("\t\tvar TimesCalledValidator from this;\n");
			File.write("\t\tvar " + basename + "Verifier from " + basename + "Mock;\n");
			File.write("\t\t" + basename + "Verifier.CallValidator = TimesCalledValidator;\n");
			File.write("\t\treturn " + basename + "Verifier;\n");
			File.write("\t}\n\n");

			File.write("\t" + basename + "Verifier -- verify(Num)Times(" + basename + "Mock) {\n");
			File.write("\t\tvar TimesCalledValidator from this;\n");
			File.write("\t\tTimesCalledValidator.minExpectedTimes = Num;\n");
			File.write("\t\tTimesCalledValidator.maxExpectedTimes = Num;\n");
			File.write("\t\tvar " + basename + "Verifier from " + basename + "Mock;\n");
			File.write("\t\t" + basename + "Verifier.CallValidator = TimesCalledValidator;\n");
			File.write("\t\treturn " + basename + "Verifier;\n");
			File.write("\t}\n\n");
		}
	}

	generateProvisions(File, WatchedArgument[], StubbedReturn[], WakeClass[]) {
		var Text[] = [];

		Text[].push("MockTracker");
		Text[].push("TimesCalledValidator");
		Text[].push("Asserts <- { return Asserts[0]; }");

		foreach(WatchedArgument[]) {
			if(!Text[].contains(WatchedArgument.getWatchedType())) {
				Text[].push(WatchedArgument.getWatchedType());
			}
		}

		foreach(StubbedReturn[]) {
			if(!Text[].contains(StubbedReturn.getStubbedType())) {
				Text[].push(StubbedReturn.getStubbedType());
			}
		}

		foreach(WakeClass[]) {
			if(!Text[].contains(WakeClass.classname)) {
				Text[].push(WakeClass.classname);
			}
		}

		File.write(CommaStatementGenerator.generate("provides", Text[]));
	}
