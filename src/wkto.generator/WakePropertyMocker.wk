module wkto.generator;

import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeVarDecl;
import treflect.WakeLambdaType;
import treflect.WakeListType;
import treflect.WakeOptionalType;
import treflect.WakeParameterizedType;
import treflect.WakeClassType;
import wkto.generator.WatchedArgument;
import wkto.generator.StubbedReturn;
import wkto.generator.NameTransformer;

every WakePropertyMocker is:

	provides StubbedReturn, WatchedArgument;

	needs NameTransformer;

	WatchedArgument[] -- getWatchedArguments(WakeProperty) {
		var WatchedArgument[] = [];

		var Text base = NameTransformer.methodToProperty(WakeProperty.name);

		var Text retname = "Num";
		var WakeLambdaType? = WakeProperty.WakeVarDecl.WakeType.WakeLambdaType;

		if WakeLambdaType exists {
			var returned WakeType? = WakeLambdaType.returntype;
			if returned exists {
				retname = returned.getPureName();
			}

			var WakeType[] = WakeLambdaType.arguments;
			for(var Num = 0; Num < WakeLambdaType.arguments.getSize(); Num += 1) { // @Todo foreach at
				var WatchedArgument from this;
				WatchedArgument.type = getMockableArgTypeName(WakeLambdaType.arguments[Num]);
				WatchedArgument.rettype = retname;
				WatchedArgument.specialty = WatchedArgument.alias := base + "_arg" + Num.toString();

				WatchedArgument[].push(WatchedArgument);
			}
		}

		return WatchedArgument[];
	}

	StubbedReturn? -- getStubbedReturn(WakeProperty) {
		if WakeProperty.WakeVarDecl.WakeType.type != 1 then return nothing;

		var WakeLambdaType? = WakeProperty.WakeVarDecl.WakeType.WakeLambdaType;
		if WakeLambdaType exists {
			if WakeLambdaType.arguments.getSize() > 0 then return nothing;

			var WakeType? = WakeLambdaType.returntype;
			if WakeType exists {
				var StubbedReturn from this;
				StubbedReturn.type = WakeType.getPureName();
				StubbedReturn.alias = NameTransformer.methodToProperty(WakeProperty.name);
				StubbedReturn.specialty = StubbedReturn.alias;
				return StubbedReturn;
			}
		}

		return nothing;
	}

	Text -- getMockableArgTypeName(WakeType) {
		var WakeParameterizedType? = WakeType.WakeParameterizedType;
		if WakeParameterizedType exists {
			if WakeParameterizedType.isArgParameterization {
				return "Anything";
			} else {
				return WakeParameterizedType.label;
			}
		}

		var WakeClassType? = WakeType.WakeClassType;
		if WakeClassType exists {
			var Text = WakeClassType.classname;
			foreach $WakeType in WakeClassType.parameters {
				Text += getMockableArgTypeName($WakeType);
			}

			return Text;
		}

		var WakeListType? = WakeType.WakeListType;
		if WakeListType exists {
			return getMockableArgTypeName(WakeListType.contained) + "[]";
		}

		var WakeOptionalType? = WakeType.WakeOptionalType;
		if WakeOptionalType exists {
			return getMockableArgTypeName(WakeOptionalType.contained) + "[]";
		}

		return "Error";
	}
