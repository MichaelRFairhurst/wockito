module wkto.generator;

import io.File;
import treflect.WakeClass;
import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeLambdaType;
import wkto.generator.MethodIteration;
import wkto.generator.ArgumentIteration;
import wkto.generator.ArgumentWatcherGatherer;
import wkto.generator.ArgumentIterator;
import wkto.generator.NameTransformer;
import wkto.generator.MethodIterator;
import wkto.generator.MethodBodyGenerator;
import wkto.generator.MethodReturnGenerator;

every MethodGenerator (capable MethodIteration) is:

	needs File, ArgumentIterator, MethodBodyGenerator, MethodReturnGenerator;
	provides ArgumentWatcherGatherer, NameTransformer, MethodIterator;

	iterate(WakeClass, WakeProperty, WakeType[] args, WakeType? returntype) {
		var ArgumentWatcherGatherer from this;
		ArgumentIterator.set((cast ArgumentIteration) ArgumentWatcherGatherer);

		var WakeLambdaType? = WakeProperty.WakeType.WakeLambdaType;
		if WakeLambdaType exists {
			ArgumentIterator.iterate(WakeClass, WakeProperty, WakeLambdaType.arguments, WakeLambdaType.returntype);
		}

		File.write("\t");
		MethodReturnGenerator.generate(File, returntype);

		for(var Num = 0; Num < args.getSize(); Num += 1) { // @TODO foreach in at
			File.write(WakeProperty.casing[Num]);
			File.write(args[Num].getPureName() + " arg" + Num.toString());
		}

		File.write(WakeProperty.casing[args.getSize()]); // might be just ')' but might be ')ALastMethodSegment()'
		File.write(" {\n");

		MethodBodyGenerator.generate(File, WakeClass, WakeProperty, ArgumentWatcherGatherer, returntype);

		File.write("\t}\n\n");
	}
