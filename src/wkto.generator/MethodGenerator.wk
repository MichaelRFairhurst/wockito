module wkto.generator;

import io.File;
import treflect.WakeClass;
import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeVarDecl;
import treflect.WakeLambdaType;
import treflect.WakeParameterizedType;
import wkto.generator.MethodIteration;
import wkto.generator.ArgumentIteration;
import wkto.generator.ArgumentWatcherGatherer;
import wkto.generator.ArgumentIterator;
import wkto.generator.NameTransformer;
import wkto.generator.MethodIterator;
import wkto.generator.MethodBodyGenerator;
import wkto.generator.MethodReturnGenerator;

every MethodGenerator (capable MethodIteration) is:

	needs File, ArgumentIterator, MethodBodyGenerator, MethodReturnGenerator;
	provides ArgumentWatcherGatherer, NameTransformer, MethodIterator;

	iterate(WakeClass, WakeProperty, WakeType[] args, WakeType? returntype) {
		var ArgumentWatcherGatherer from this;
		ArgumentIterator.set((cast ArgumentIteration) ArgumentWatcherGatherer);

		var WakeLambdaType? = WakeProperty.WakeVarDecl.WakeType.WakeLambdaType;
		if WakeLambdaType exists {
			ArgumentIterator.iterate(WakeClass, WakeProperty, WakeLambdaType.arguments, WakeLambdaType.returntype);
		}

		File.write("\t");
		var WakeParameterizedType[] = getFuncTypeParams(args, returntype);

		if WakeParameterizedType[].getSize() {
			File.write("{");
			File.write(",".join(WakeParameterizedType[].map({ a => a.label })));
			File.write("} ");
		}
		MethodReturnGenerator.generate(File, returntype);

		foreach arg in args.getSize() at i {
			File.write(WakeProperty.casing[i]);
			File.write(arg.getPureName() + " arg" + i.toString());
		}

		File.write(WakeProperty.casing[args.getSize()]); // might be just ')' but might be ')ALastMethodSegment()'
		File.write(" {\n");

		MethodBodyGenerator.generate(File, WakeClass, WakeProperty, ArgumentWatcherGatherer, returntype);

		File.write("\t}\n\n");
	}

	WakeParameterizedType[] -- getFuncTypeParams(WakeType[] args, WakeType? returntype) {
		var WakeParameterizedType[] = [];
		if returntype exists {
			WakeParameterizedType[] = returntype.getArgParameterizations();
		}

		foreach args {
			foreach WakeType.getArgParameterizations() {
				WakeParameterizedType[].push(WakeParameterizedType);
			}
		}

		var Text[] names = [];
		var $WakeParameterizedType[] = [];
		foreach WakeParameterizedType[] {
			if names.contains(WakeParameterizedType.label) {
				continue;
			}
			$WakeParameterizedType[].push(WakeParameterizedType);
			names.push(WakeParameterizedType.label);
		}

		return $WakeParameterizedType[];
	}
