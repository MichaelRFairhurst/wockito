module wkto.generator;

import io.File;
import treflect.WakeClass;
import treflect.WakeProperty;
import treflect.WakeType;
import wkto.generator.ArgumentWatcherGatherer;
import wkto.generator.MethodBodyGenerator;
import wkto.generator.NameTransformer;

every MockMethodGenerator (capable MethodBodyGenerator) is:

	needs NameTransformer;

	generate(File, WakeClass, WakeProperty, ArgumentWatcherGatherer, WakeType? returntype) {
		if(ArgumentWatcherGatherer.aliases.getSize() > 0) {
			for(var Num = 0; Num < ArgumentWatcherGatherer.aliases.getSize(); Num += 1) { // @TODO foreach in at
				File.write("\t\t" + ArgumentWatcherGatherer.aliases[Num] + ".tell(" + ArgumentWatcherGatherer.casts[Num] + "arg" + Num.toString() + ", MockTracker.current());\n");
				if returntype exists {
					File.write("\t\t");
					if(Num == 0) {
						File.write("var When{" + returntype.getPureName() + "}[] = ");
						File.write(ArgumentWatcherGatherer.aliases[Num] + ".getPossibleStubs(arg0);");
					} else {
						File.write("When[] = When[].intersect(" + ArgumentWatcherGatherer.aliases[Num] + ".getPossibleStubs(arg" + Num.toString() + "));");
					}
					File.write("\n");
				}
			}

			File.write('\t\tMockTracker.next();\n');

			if returntype exists {
				File.write("\t\treturn When[0].get();\n");
			}
		} else {
			File.write('\t\tMockTracker.next();\n');

			if returntype exists {
				File.write("\t\treturn (unsafe cast " + returntype.getPureName() + ") " + NameTransformer.methodToProperty(WakeProperty.name) + ".get();\n");
			}
		}
	}
