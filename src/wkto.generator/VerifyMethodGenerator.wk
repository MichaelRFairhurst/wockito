module wkto.generator;

import io.File;
import treflect.WakeClass;
import treflect.WakeType;
import treflect.WakeProperty;
import wkto.generator.ArgumentWatcherGatherer;
import wkto.generator.MethodBodyGenerator;

#>
# generate like
#
#	var Num[] calls = getZpTextZcNumZpZa1.getCallIndices(Text);
#	calls = calls.intersect(getZpTextZcNumZpZa2.getCallIndices(Num));
#	var $CallValidator? = CallValidator; // bugfix.....
#	if $CallValidator exists {
#		$CallValidator.validate(calls);
#	}
##
every VerifyMethodGenerator (capable MethodBodyGenerator) is:

	generate(File, WakeClass, WakeProperty, ArgumentWatcherGatherer, WakeType? returntype) {
		if ArgumentWatcherGatherer.aliases.getSize() == 0 then return;

		foreach alias in ArgumentWatcherGatherer.aliases at i {
			File.write("\t\t");
			if Num == 0 {
				File.write("var Num[] = ");
				File.write(alias + ".getCallIndices(" + ArgumentWatcherGatherer.casts[i] + "arg0);\n");
			} else {
				File.write("Num[] = Num[].intersect(" + alias + ".getCallIndices(" + ArgumentWatcherGatherer.casts[i] + "arg" + i.toString() + "));\n");
			}
		}

		File.write("\t\t"); File.write("var $CallValidator? = CallValidator;\n");
		File.write("\t\t"); File.write("if $CallValidator exists {\n");
		File.write("\t\t\t"); File.write("$CallValidator.methodname = '" + WakeProperty.name + "';\n");
		File.write("\t\t\t"); File.write("$CallValidator.validate(Num[]);\n");
		File.write("\t\t"); File.write("}\n");
	}
