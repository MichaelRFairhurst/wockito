module wkto.generator;

import std.Map;
import treflect.WakeClass;
import treflect.WakeType;
import treflect.WakeVarDecl;
import treflect.WakeProperty;
import treflect.WakeLambdaType;
import wkto.generator.MethodIteration;

every MethodIterator is:

	with MethodIteration? = nothing;

	set($MethodIteration) {
		MethodIteration = $MethodIteration;
	}

	iterate(WakeClass) {
		foreach methodname in WakeClass.properties.getKeys() {
			if methodname.indexOf("<-") != nothing then continue;

			var WakeProperty? method = WakeClass.properties.get(methodname);
			if method exists {
				if method.WakeVarDecl.WakeType.type != 1 then continue;
				var $MethodIteration? = MethodIteration;
				if $MethodIteration exists {
					var WakeLambdaType? = method.WakeVarDecl.WakeType.WakeLambdaType;
					if WakeLambdaType exists {
						$MethodIteration.iterate(WakeClass, method, WakeLambdaType.arguments, WakeLambdaType.returntype);
					}
				}
			}
		}
	}
