module wkto.generator;

import std.Map;
import treflect.WakeClass;
import treflect.WakeProperty;
import treflect.WakeType;
import treflect.WakeVarDecl;
import treflect.WakeLambdaType;
import wkto.generator.WatchedArgument;
import wkto.generator.StubbedReturn;
import wkto.generator.WakePropertyMocker;

every WakeClassMocker is:

	needs WakePropertyMocker;

	WatchedArgument[] -- getWatchedArguments(WakeClass) {
		var WatchedArgument[] = [];

		foreach(WakeClass.properties.getKeys()) {
			var WakeProperty? = WakeClass.properties.get(Text);
			if WakeProperty exists {
				var $WatchedArgument[] = WakePropertyMocker.getWatchedArguments(WakeProperty);
				foreach($WatchedArgument[]) WatchedArgument[].push($WatchedArgument);
			}
		}

		return WatchedArgument[];
	}

	StubbedReturn[] -- getStubbedReturns(WakeClass) {
		var StubbedReturn[] = [];

		foreach(WakeClass.properties.getKeys()) {
			var WakeProperty? = WakeClass.properties.get(Text);
			if WakeProperty exists {
				var StubbedReturn? = WakePropertyMocker.getStubbedReturn(WakeProperty);
				if StubbedReturn exists {
					StubbedReturn[].push(StubbedReturn);
				}
			}
		}

		return StubbedReturn[];
	}

	WakeType[] -- getReturnTypes(WakeClass) {
		var WakeType[] = [];


		foreach(WakeClass.properties.getKeys()) {
			var WakeProperty? = WakeClass.properties.get(Text);
			if WakeProperty exists {
				var WakeLambdaType? = WakeProperty.WakeVarDecl.WakeType.WakeLambdaType;
				if WakeLambdaType exists {
					var WakeType? = WakeLambdaType.returntype;
					if WakeType exists {
						WakeType[].push(WakeType);
					}
				}
			}
		}

		return WakeType[];
	}
