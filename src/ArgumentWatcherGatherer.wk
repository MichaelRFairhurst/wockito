import MethodIterator;
import ArgumentIterator;
import MethodIteration;
import ArgumentIteration;
import WakeClass;
import WakeType;
import WakeProperty;
import NameTransformer;

every ArgumentWatcherGatherer (an ArgumentIterator, capable ArgumentIteration) is:

	needs NameTransformer;
	with Text[] types = [];
	with Text[] aliases = [];
	with Text[] declarations = [];

	iterate(WakeClass, WakeProperty, WakeType? returntype, WakeType arg, argn Num) {
		var Text returntypename = "Num";

		if returntype exists {
			returntypename = returntype.getPureName();
		}

		var Text typename = "ArgumentIterator{" + returntypename + "," + arg.getPureName() + "}";
		var Text alias = NameTransformer.methodToProperty(WakeProperty.name) + "Za" + argn.toString();
		if(!types.contains(typename)) types.push(typename);
		aliases.push(alias);
		declarations.push(typename + " " + alias);
	}

