import File;
import WakeClass;
import NameTransformer;
import MethodIterator;
import StubberMethodGenerator;
import MethodBodyGenerator;
import ArgumentIterator;
import ArgumentWatcherGatherer;
import WhenGatherer;
import MethodGenerator;
import MethodReturnGenerator;
import ImportIterator;
import StubberMethodReturnGenerator;
import MethodIteration;
import CommaStatementGenerator;

#>
# Generates files along the lines of:
#
# every ExampleMockStubber is:
#
# 	needs ArgumentWatcher{Text, Text}:getZpTextZcNumZpZa1 getZpTextZcNumZpZa1, ArgumentWatcher{Num, Text}:getZpTextZcNumZpZa1 getZpTextZcNumZpZa2;
#
# 	provides When{Text};
#
# 	When{Text} -- get(Text, Num) {
# 		var When{Text} <- this;
# 		getZpTextZcNumZpZa1.expect(Text, When);
# 		getZpTextZcNumZpZa2.expect(Num, When);
# 		return When;
# 	}
##
every MockStubberFileGenerator is:

	needs NameTransformer, File, MethodIterator, CommaStatementGenerator;

	provides File <- { return File; },
		MethodGenerator,
		MethodBodyGenerator <- StubberMethodGenerator, StubberMethodGenerator,
		MethodReturnGenerator <- StubberMethodReturnGenerator, StubberMethodReturnGenerator,
		ArgumentIterator,
		ImportIterator,
		NameTransformer,
		MethodIterator,
		ArgumentWatcherGatherer,
		WhenGatherer;

	generate(WakeClass) {
		generateImports(WakeClass);

		File.write("\n");
		File.write("every " + WakeClass.classname + "Stubber is:\n");

		generateNeeds(WakeClass);
		generateProvisions(WakeClass);
		generateMethods(WakeClass);
	}

	generateImports(WakeClass) {
		var ImportIterator <- this;

		ImportIterator.addImport('When');
		ImportIterator.addImport('ArgumentWatcher');
		ImportIterator.addImport(WakeClass.classname);

		MethodIterator.set((cast MethodIteration) ImportIterator);
		MethodIterator.iterate(WakeClass);

		foreach(ImportIterator.getImports()) { // @TODO foreach as
			File.write("import " + Text + ";\n");
		}
	}

	generateMethods(WakeClass) {
		MethodIterator.set((cast MethodIteration) (MethodGenerator <- this));
		MethodIterator.iterate(WakeClass);
	}

	generateProvisions(WakeClass) {
		var ArgumentWatcherGatherer <- this;
		MethodIterator.set((cast MethodIteration) ArgumentWatcherGatherer);
		MethodIterator.iterate(WakeClass);

		var Text[] provisions = [];

		var Text[] = ArgumentWatcherGatherer.types;
		foreach(Text[]) { // @TODO foreach as?
			provisions.push("When{" + Text + "}");
		}

		File.write(CommaStatementGenerator.generate("provides", provisions));
	}

	generateNeeds(WakeClass) {
		var ArgumentWatcherGatherer <- this;
		MethodIterator.set((cast MethodIteration) ArgumentWatcherGatherer);
		MethodIterator.iterate(WakeClass);

		var Text[] deps = [];

		for(var Num = 0; Num < ArgumentWatcherGatherer.provisions.getSize(); Num += 1) {
			deps.push(ArgumentWatcherGatherer.provisions[Num] + " " + ArgumentWatcherGatherer.aliases[Num]);
		}

		var WhenGatherer <- this;
		MethodIterator.set((cast MethodIteration) WhenGatherer);
		MethodIterator.iterate(WakeClass);

		for(var Num = 0; Num < WhenGatherer.provisions.getSize(); Num += 1) {
			deps.push(WhenGatherer.provisions[Num] + " " + WhenGatherer.aliases[Num]);
		}

		File.write(CommaStatementGenerator.generate("needs", deps));
	}
