module wkto;

import std.UndefinedIndexException;
import wunit.Asserts;
import wkto.When;

@TestClass
every WhenTest is:

	provides When{Int};

	@Test
	~[ test .thenReturn() on an argument stubber, and then getting its return value ]~(Asserts) {
		var When{Int} from this;
		When.thenReturn(1).thenReturn(2).thenReturn(3);

		Asserts.that(When.get())Equals(1);
		Asserts.that(When.get())Equals(2);
		Asserts.that(When.get())Equals(3);
	}

	@Test
	~[ test .get() repeats last setup ]~(Asserts) {
		var When{Int} from this;
		When.thenReturn(1).thenReturn(2);

		Asserts.that(When.get())Equals(1);
		Asserts.that(When.get())Equals(2);
		Asserts.that(When.get())Equals(2);
		Asserts.that(When.get())Equals(2);
	}

	@Test
	~[ test .get() throws UndefinedIndexException if never set ]~(Asserts) {
		var When{Int} from this;
		try {
			When.get();
			Asserts.fail("Never threw");
		} catch(UndefinedIndexException) {
		}
	}
