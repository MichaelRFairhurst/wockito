import Asserts;
import ArgumentWatcher;
import When;

every ArgumentWatcherTest is:

	needs ArgumentWatcher{Num, Num};

	provides When{Num};

	~[ test get a nonexist stub ]~(Asserts) {
		var When{Num}[] = ArgumentWatcher.getPossibleStubs(1234);
		Asserts.that(When[].getSize())Equals(0);
		Asserts.that(When[].getSize())Equals(0);
	}

	~[ test set and get an expected stub ]~(Asserts) {
		var When{Num} <- this;
		var $When{Num} <- this;

		ArgumentWatcher.expect(1, When);
		ArgumentWatcher.expect(2, $When);
		var When{Num}[] arr = ArgumentWatcher.getPossibleStubs(1);
		Asserts.that(arr.getSize())Equals(1);
		Asserts.that(arr[0] == When);
		arr = ArgumentWatcher.getPossibleStubs(2);
		Asserts.that(arr.getSize())Equals(1);
		Asserts.that(arr[0] == $When);
	}

	~[ test set and get a overlapping expected stubs ]~(Asserts) {
		var When{Num} <- this;
		var $When{Num} <- this;

		ArgumentWatcher.expect(3, When);
		ArgumentWatcher.expect(3, $When);
		var When{Num}[] arr = ArgumentWatcher.getPossibleStubs(3);
		Asserts.that(arr.getSize())Equals(2);
		Asserts.that(arr[0] == When);
		Asserts.that(arr[1] == $When);
	}

	~[ test call nums with a nonmatching call ]~(Asserts) {
		ArgumentWatcher.tell(1, 3);
		ArgumentWatcher.tell(2, 4);
		var Num[] = ArgumentWatcher.getCallIndices(3);
		Asserts.that(Num[].getSize())Equals(0);
	}

	~[ test call nums with a single matching call ]~(Asserts) {
		ArgumentWatcher.tell(4, 5);
		var Num[] = ArgumentWatcher.getCallIndices(4);
		Asserts.that(Num[].getSize())Equals(1);
		Asserts.that(Num[0])Equals(5);
	}

	~[ test call nums with multiple matching calls ]~(Asserts) {
		ArgumentWatcher.tell(5, 6);
		ArgumentWatcher.tell(5, 7);
		var Num[] = ArgumentWatcher.getCallIndices(5);
		Asserts.that(Num[].getSize())Equals(2);
		Asserts.that(Num[0])Equals(6);
		Asserts.that(Num[1])Equals(7);
	}
