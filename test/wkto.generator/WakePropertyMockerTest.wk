module wkto.generator;

import std.Map;
import wunit.Asserts;
import treflect.WakeProperty;
import treflect.WakeType;
import treflect.ReflectionProvider;
import treflect.WakeLambdaType;
import treflect.WakeClassType;
import wkto.generator.WakePropertyMocker;
import wkto.generator.StubbedReturn;
import wkto.generator.WatchedArgument;

@TestClass
every WakePropertyMockerTest is:

	needs ReflectionProvider, WakePropertyMocker;

	#>
	@Test
	~[ test get stubber from property returns nothing ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		WakeProperty.WakeType.type = 2; // class, not lambda
		var StubbedReturn? = WakePropertyMocker.getStubbedReturn(WakeProperty);
		Asserts.that(StubbedReturn == nothing);
	}

	@Test
	~[ test get stubber from method with arguments returns nothing ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		var WakeLambdaType from ReflectionProvider;
		WakeProperty.WakeType.WakeLambdaType = WakeLambdaType;
		WakeProperty.WakeType.type = 1; // lambda
		WakeLambdaType.arguments.push(WakeType from ReflectionProvider);
		WakeLambdaType.returntype = WakeType from ReflectionProvider;
		var StubbedReturn? = WakePropertyMocker.getStubbedReturn(WakeProperty);
		Asserts.that(StubbedReturn == nothing);
	}

	@Test
	~[ test get stubber from method with no arguments but no return returns nothing ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		WakeProperty.WakeType.type = 1; // lambda
		var StubbedReturn? = WakePropertyMocker.getStubbedReturn(WakeProperty);
		Asserts.that(StubbedReturn == nothing);
	}

	@Test
	~[ test get stubber from method with no arguments and return gets a StubbedReturn ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		var WakeLambdaType from ReflectionProvider;
		var WakeClassType from ReflectionProvider;
		var WakeType from ReflectionProvider;
		WakeProperty.name = "hey()";
		WakeProperty.WakeType.type = 1; // lambda
		WakeType.type = 2; // class
		WakeType.WakeClassType = WakeClassType;
		WakeClassType.classname = "Me";
		WakeLambdaType.returntype = WakeType;
		WakeProperty.WakeType.WakeLambdaType = WakeLambdaType;
		var StubbedReturn? = WakePropertyMocker.getStubbedReturn(WakeProperty);
		if StubbedReturn exists {
			Asserts.that(StubbedReturn.type)Equals("Me");
			Asserts.that(StubbedReturn.alias)Equals("heyZpZp");
			Asserts.that(StubbedReturn.specialty)Equals("heyZpZp");
		} else {
			Asserts.fail("Stubbed return should have existed");
		}
	}

	@Test
	~[ test get watched args from property returns nothing ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		WakeProperty.WakeType.type = 2; // class, not lambda
		var WatchedArgument[] = WakePropertyMocker.getWatchedArguments(WakeProperty);
		Asserts.that(WatchedArgument[].getSize())Equals(0);
	}

	@Test
	~[ test get watched args from property with no args returns nothing ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		WakeProperty.WakeType.type = 1; // lambda
		var WatchedArgument[] = WakePropertyMocker.getWatchedArguments(WakeProperty);
		Asserts.that(WatchedArgument[].getSize())Equals(0);
	}

	@Test
	~[ test get watched args from property with no return returns args with num returntype ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		var WakeLambdaType from ReflectionProvider;
		var WakeClassType from ReflectionProvider;
		var $WakeClassType from ReflectionProvider;
		WakeProperty.name = "MyProp(Firstarg,Secondarg)";
		WakeProperty.WakeType.WakeLambdaType = WakeLambdaType;
		WakeLambdaType.arguments.push(WakeType from ReflectionProvider);
		WakeLambdaType.arguments.push(WakeType from ReflectionProvider);
		WakeLambdaType.arguments[0].WakeClassType = WakeClassType;
		WakeLambdaType.arguments[1].WakeClassType = $WakeClassType;
		WakeClassType.classname = "Firstarg";
		$WakeClassType.classname = "Secondarg";
		var WatchedArgument[] = WakePropertyMocker.getWatchedArguments(WakeProperty);
		Asserts.that(WatchedArgument[].getSize())Equals(2);
		Asserts.that(WatchedArgument[0].type)Equals("Firstarg");
		Asserts.that(WatchedArgument[1].type)Equals("Secondarg");
		Asserts.that(WatchedArgument[0].alias)Equals("myPropZpFirstargZcSecondargZp_arg0");
		Asserts.that(WatchedArgument[1].alias)Equals("myPropZpFirstargZcSecondargZp_arg1");
		Asserts.that(WatchedArgument[0].specialty)Equals("myPropZpFirstargZcSecondargZp_arg0");
		Asserts.that(WatchedArgument[1].specialty)Equals("myPropZpFirstargZcSecondargZp_arg1");
		Asserts.that(WatchedArgument[0].rettype)Equals("Num");
		Asserts.that(WatchedArgument[1].rettype)Equals("Num");
	}

	@Test
	~[ test get watched args from property with return returns args with proper returntype ]~(Asserts) {
		var WakeProperty from ReflectionProvider;
		var WakeLambdaType from ReflectionProvider;
		var WakeClassType from ReflectionProvider;
		var $WakeClassType from ReflectionProvider;
		WakeProperty.name = "MyProp(Firstarg,Secondarg)";
		WakeProperty.WakeType.WakeLambdaType = WakeLambdaType;
		WakeLambdaType.arguments.push(WakeType from ReflectionProvider);
		WakeLambdaType.arguments.push(WakeType from ReflectionProvider);
		WakeLambdaType.arguments[0].WakeClassType = WakeClassType;
		WakeLambdaType.arguments[1].WakeClassType = $WakeClassType;
		WakeClassType.classname = "Firstarg";
		$WakeClassType.classname = "Secondarg";

		var WakeType from ReflectionProvider;
		var returned WakeClassType from ReflectionProvider;
		WakeType.WakeClassType = returned;
		returned.classname = "Ret";
		WakeLambdaType.returntype = WakeType;

		var WatchedArgument[] = WakePropertyMocker.getWatchedArguments(WakeProperty);
		Asserts.that(WatchedArgument[].getSize())Equals(2);
		Asserts.that(WatchedArgument[0].type)Equals("Firstarg");
		Asserts.that(WatchedArgument[1].type)Equals("Secondarg");
		Asserts.that(WatchedArgument[0].alias)Equals("myPropZpFirstargZcSecondargZp_arg0");
		Asserts.that(WatchedArgument[1].alias)Equals("myPropZpFirstargZcSecondargZp_arg1");
		Asserts.that(WatchedArgument[0].specialty)Equals("myPropZpFirstargZcSecondargZp_arg0");
		Asserts.that(WatchedArgument[1].specialty)Equals("myPropZpFirstargZcSecondargZp_arg1");
		Asserts.that(WatchedArgument[0].rettype)Equals("Ret");
		Asserts.that(WatchedArgument[1].rettype)Equals("Ret");
	}
	##
